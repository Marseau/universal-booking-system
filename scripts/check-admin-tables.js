#!/usr/bin/env node

const { createClient } = require('@supabase/supabase-js')
require('dotenv').config()

const supabaseUrl = process.env.SUPABASE_URL
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY

const supabase = createClient(supabaseUrl, supabaseKey)

async function checkTables() {
  console.log('üîç Verificando tabelas admin no Supabase...')
  
  const tablesToCheck = [
    'admin_users',
    'admin_permissions', 
    'email_logs',
    'function_executions'
  ]
  
  for (const table of tablesToCheck) {
    try {
      console.log(`\nüìã Verificando tabela: ${table}`)
      
      // Try to query the table structure
      const { data, error, count } = await supabase
        .from(table)
        .select('*', { count: 'exact', head: true })
        .limit(1)
      
      if (error) {
        console.error(`‚ùå Erro ao acessar ${table}:`, error.message)
      } else {
        console.log(`‚úÖ Tabela ${table} existe e √© acess√≠vel`)
        console.log(`üìä Total de registros: ${count || 0}`)
        
        // Get a sample record if exists
        if (count > 0) {
          const { data: sample } = await supabase
            .from(table)
            .select('*')
            .limit(1)
          console.log(`üìÑ Exemplo de registro:`, JSON.stringify(sample?.[0], null, 2))
        }
      }
    } catch (err) {
      console.error(`‚ùå Erro ao verificar ${table}:`, err.message)
    }
  }
  
  // Check if default admin user exists
  console.log('\nüë§ Verificando usu√°rio admin padr√£o...')
  try {
    const { data: admin, error } = await supabase
      .from('admin_users')
      .select('id, email, name, role, is_active, created_at')
      .eq('email', 'admin@universalbooking.com')
      .single()
    
    if (error) {
      console.error('‚ùå Usu√°rio admin padr√£o n√£o encontrado:', error.message)
    } else {
      console.log('‚úÖ Usu√°rio admin padr√£o encontrado:')
      console.log(JSON.stringify(admin, null, 2))
    }
  } catch (err) {
    console.error('‚ùå Erro ao verificar admin user:', err.message)
  }
  
  // Check existing tenants
  console.log('\nüè¢ Verificando tenants existentes...')
  try {
    const { data: tenants, error } = await supabase
      .from('tenants')
      .select('id, business_name, slug, business_domain, subscription_status')
      .limit(5)
    
    if (error) {
      console.error('‚ùå Erro ao verificar tenants:', error.message)
    } else {
      console.log(`‚úÖ ${tenants?.length || 0} tenants encontrados:`)
      tenants?.forEach(tenant => {
        console.log(`  - ${tenant.business_name} (${tenant.slug}) - Domain: ${tenant.business_domain}`)
      })
    }
  } catch (err) {
    console.error('‚ùå Erro ao verificar tenants:', err.message)
  }
  
  console.log('\n‚úÖ Verifica√ß√£o conclu√≠da!')
}

checkTables().catch(console.error)