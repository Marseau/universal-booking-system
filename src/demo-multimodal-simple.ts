import { MultiModalHelpers } from './services/multimodal-helpers.service'

/**
 * Demonstra√ß√£o simples do sistema multi-modal
 */
async function demoMultiModal() {
  console.log('üé¨ ===== DEMO MULTI-MODAL ===== üé¨\n')

  const helpers = new MultiModalHelpers()

  // Teste 1: An√°lise de texto
  console.log('üìù TESTE 1: An√°lise de Texto')
  const textos = [
    'Gostaria de agendar um corte para amanh√£ √†s 14h',
    'Preciso cancelar urgente meu hor√°rio!',
    'Qual o pre√ßo de uma escova?'
  ]

  for (let i = 0; i < textos.length; i++) {
    const texto = textos[i]!
    console.log(`\n${i + 1}. "${texto}"`)
    
    try {
      const businessContext = await helpers.analyzeTextForBusiness(texto, 'beauty')
      const emotion = await helpers.analyzeTextEmotion(texto)
      
      console.log(`   üòä Emo√ß√£o: ${emotion.tone}`)
      console.log(`   üìä Sentimento: ${emotion.sentimentScore.toFixed(2)}`)
      console.log(`   üîß A√ß√µes: ${businessContext.suggestedActions.join(', ')}`)
      console.log(`   ‚ö†Ô∏è  Urg√™ncia: ${businessContext.urgencyLevel}`)
    } catch (error) {
      console.log(`   ‚ùå Erro: ${error}`)
    }
  }

  // Teste 2: Simula√ß√£o de √°udio
  console.log('\n\nüéµ TESTE 2: Processamento de √Åudio (Simulado)')
  const transcricoes = [
    'Oi meninas! Queria agendar um corte para sexta √†s tr√™s da tarde',
    'Estou muito chateada com o √∫ltimo atendimento!'
  ]

  for (let i = 0; i < transcricoes.length; i++) {
    const transcricao = transcricoes[i]!
    console.log(`\n${i + 1}. Transcri√ß√£o: "${transcricao}"`)
    
    try {
      const emotion = await helpers.analyzeTextEmotion(transcricao)
      const businessContext = await helpers.analyzeTextForBusiness(transcricao, 'beauty')
      
      console.log(`   üòä Tom: ${emotion.tone}`)
      console.log(`   üìä Score: ${emotion.sentimentScore.toFixed(2)}`)
      console.log(`   üîß A√ß√£o recomendada: ${businessContext.suggestedActions[0] || 'continue_conversation'}`)
    } catch (error) {
      console.log(`   ‚ùå Erro: ${error}`)
    }
  }

  // Teste 3: Capacidades
  console.log('\n\n‚öôÔ∏è  CAPACIDADES DO SISTEMA')
  console.log('‚úÖ An√°lise de texto com emo√ß√£o')
  console.log('‚úÖ Contexto de neg√≥cio')
  console.log('‚úÖ Extra√ß√£o de entidades')
  console.log('‚úÖ Suporte multi-modal')
  console.log('‚úÖ Cache inteligente')
  console.log('‚úÖ Detec√ß√£o de idioma')

  // Teste 4: Detec√ß√£o de idioma
  console.log('\n\nüåç DETEC√á√ÉO DE IDIOMA')
  const samples = [
    'Ol√°, como vai voc√™?',
    'Hello, how are you?',
    'Hola, ¬øc√≥mo est√°s?'
  ]

  for (const sample of samples) {
    const lang = helpers.detectLanguageFallback(sample)
    console.log(`   "${sample}" ‚Üí ${lang}`)
  }

  console.log('\n‚úÖ Demo conclu√≠da com sucesso! üéâ')
}

// Executar se chamado diretamente
if (require.main === module) {
  demoMultiModal()
    .then(() => {
      console.log('\nüèÅ Demo finalizada!')
      process.exit(0)
    })
    .catch((error) => {
      console.error('\n‚ùå Erro:', error)
      process.exit(1)
    })
}

export { demoMultiModal } 