import AdvancedIntentRecognitionService from './services/advanced-intent-recognition.service'
import { IntentRouterService } from './services/intent-router.service'
import { ConversationContext } from './types/ai.types'

/**
 * Demonstra√ß√£o Simples do Sistema de Reconhecimento de Inten√ß√µes
 * 
 * Compara o sistema b√°sico com o sistema avan√ßado
 */

async function demonstrateIntentRecognition(): Promise<void> {
  console.log('\nüéØ DEMONSTRA√á√ÉO - Reconhecimento de Inten√ß√µes Avan√ßado vs B√°sico\n')
  
  // Inicializar servi√ßos
  const basicService = new IntentRouterService()
  const advancedService = new AdvancedIntentRecognitionService()
  
  // Contexto de teste simples
  const context: ConversationContext = {
    sessionId: 'demo_session',
    userId: 'demo_user',
    tenantId: 'demo_tenant',
    phoneNumber: '+5511999999999',
    conversationHistory: [],
    lastInteraction: new Date(),
    tenantConfig: {
      id: 'demo_tenant',
      slug: 'demo-beauty',
      businessName: 'Sal√£o Demo',
      domain: 'beauty',
      services: [],
      businessHours: {
        timezone: 'America/Sao_Paulo',
        schedule: [],
        holidays: [],
        bufferTime: 15
      },
      customFields: {},
      aiSettings: {
        greetingMessage: 'Ol√°!',
        domainKeywords: [],
        sensitiveTopics: [],
        personality: { tone: 'friendly', energy: 'medium', empathy: 'high' },
        escalationTriggers: [],
        upsellEnabled: false,
        maxResponseLength: 500,
        responseStyle: 'conversational'
      }
    }
  }

  // Cen√°rios de teste
  const testMessages = [
    'Oi! Gostaria de agendar uma manicure para amanh√£',
    'Socorro! √â uma emerg√™ncia!',
    'Quero cancelar meu agendamento',
    'Quanto custa um corte de cabelo?',
    'Que horas voc√™s abrem?',
    'Onde fica o sal√£o?',
    'Obrigada, o atendimento foi √≥timo!',
    'Estou insatisfeita com o servi√ßo',
    'Quero falar com o gerente',
    'Ol√°, bom dia!'
  ]

  for (let i = 0; i < testMessages.length; i++) {
    const message = testMessages[i]!
    console.log(`\n${i + 1}. üìù Mensagem: "${message}"`)
    
    // Teste com servi√ßo b√°sico
    const startBasic = Date.now()
    const basicResult = await basicService.analyzeIntent(message, context)
    const basicTime = Date.now() - startBasic
    
    // Teste com servi√ßo avan√ßado
    const startAdvanced = Date.now()
    const advancedResult = await advancedService.recognizeIntent(message, context)
    const advancedTime = Date.now() - startAdvanced
    
    // Comparar resultados
    console.log(`\n   üîπ B√ÅSICO:`)
    console.log(`      Intent: ${basicResult.type}`)
    console.log(`      Confian√ßa: ${(basicResult.confidence * 100).toFixed(1)}%`)
    console.log(`      Entidades: ${basicResult.entities.length}`)
    console.log(`      Tempo: ${basicTime}ms`)
    
    console.log(`\n   üî∏ AVAN√áADO:`)
    console.log(`      Intent: ${advancedResult.type}`)
    console.log(`      Confian√ßa: ${(advancedResult.confidence * 100).toFixed(1)}%`)
    console.log(`      Entidades: ${advancedResult.entities.length}`)
    console.log(`      Tempo: ${advancedTime}ms`)
    
    if (advancedResult.metadata?.engines) {
      const successfulEngines = advancedResult.metadata.engines.filter(e => e.success)
      console.log(`      Engines: ${successfulEngines.length}/${advancedResult.metadata.engines.length} sucesso`)
    }
    
    // Roteamento avan√ßado
    const routing = await advancedService.routeWithAdvancedLogic(advancedResult, context)
    console.log(`      Dom√≠nio: ${routing.primaryDomain}`)
    console.log(`      Prioridade: ${routing.priority}`)
    
    if (routing.escalationRequired) {
      console.log(`      üö® ESCALA√á√ÉO: ${routing.escalationType}`)
    }
  }
  
  // M√©tricas finais
  console.log('\nüìä M√âTRICAS DO SISTEMA AVAN√áADO')
  console.log('=' .repeat(40))
  
  const metrics = advancedService.getMetrics()
  console.log(`üìà Total de reconhecimentos: ${metrics.totalRecognitions}`)
  console.log(`‚úÖ Taxa de sucesso: ${((metrics.successfulRecognitions / metrics.totalRecognitions) * 100).toFixed(1)}%`)
  console.log(`üíæ Cache hits: ${metrics.cacheHits}`)
  console.log(`‚ö° Tempo m√©dio: ${metrics.averageProcessingTime.toFixed(2)}ms`)
  
  console.log('\n‚úÖ Demonstra√ß√£o conclu√≠da!')
}

// Demonstra√ß√£o de cache
async function demonstrateCache(): Promise<void> {
  console.log('\nüíæ DEMONSTRA√á√ÉO - Sistema de Cache\n')
  
  const service = new AdvancedIntentRecognitionService()
  const context: ConversationContext = {
    sessionId: 'cache_test',
    userId: 'cache_user',
    tenantId: 'cache_tenant',
    phoneNumber: '+5511999999998',
    conversationHistory: [],
    lastInteraction: new Date()
  }
  
  const message = 'Quero agendar uma consulta'
  
  console.log('üîÑ Primeira execu√ß√£o (sem cache)...')
  const start1 = Date.now()
  await service.recognizeIntent(message, context)
  const time1 = Date.now() - start1
  console.log(`   Tempo: ${time1}ms`)
  
  console.log('\nüîÑ Segunda execu√ß√£o (com cache)...')
  const start2 = Date.now()
  await service.recognizeIntent(message, context)
  const time2 = Date.now() - start2
  console.log(`   Tempo: ${time2}ms`)
  
  const improvement = ((time1 - time2) / time1 * 100)
  console.log(`\nüìà Melhoria com cache: ${improvement.toFixed(1)}%`)
  
  const metrics = service.getMetrics()
  console.log(`üíæ Cache hits: ${metrics.cacheHits}`)
}

// Demonstra√ß√£o de ensemble learning
async function demonstrateEnsemble(): Promise<void> {
  console.log('\nüß† DEMONSTRA√á√ÉO - Ensemble Learning\n')
  
  const service = new AdvancedIntentRecognitionService()
  const context: ConversationContext = {
    sessionId: 'ensemble_test',
    userId: 'ensemble_user',
    tenantId: 'ensemble_tenant',
    phoneNumber: '+5511999999997',
    conversationHistory: [],
    lastInteraction: new Date()
  }
  
  const complexMessage = 'Preciso remarcar minha consulta de amanh√£ porque estou doente'
  
  console.log(`üìù Mensagem complexa: "${complexMessage}"`)
  
  const result = await service.recognizeIntent(complexMessage, context)
  
  console.log(`\nüéØ Resultado do Ensemble:`)
  console.log(`   Intent: ${result.type}`)
  console.log(`   Confian√ßa: ${(result.confidence * 100).toFixed(1)}%`)
  
  if (result.metadata?.engines) {
    console.log(`\nüîß Contribui√ß√£o dos Engines:`)
    result.metadata.engines.forEach(engine => {
      const status = engine.success ? '‚úÖ' : '‚ùå'
      console.log(`   ${status} ${engine.name}: ${engine.processingTime}ms`)
    })
    
    if (result.metadata.ensembleMethod) {
      console.log(`\nüé≤ M√©todo: ${result.metadata.ensembleMethod}`)
    }
  }
  
  if (result.entities.length > 0) {
    console.log(`\nüìã Entidades extra√≠das:`)
    result.entities.forEach(entity => {
      console.log(`   ‚Ä¢ ${entity.type}: "${entity.value}" (${(entity.confidence * 100).toFixed(1)}%)`)
    })
  }
}

// Fun√ß√£o principal
async function runAllDemonstrations(): Promise<void> {
  try {
    await demonstrateIntentRecognition()
    await demonstrateCache()
    await demonstrateEnsemble()
    
    console.log('\nüéâ Todas as demonstra√ß√µes conclu√≠das com sucesso!')
    
  } catch (error) {
    console.error('‚ùå Erro durante as demonstra√ß√µes:', error)
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  runAllDemonstrations().catch(console.error)
}

export { demonstrateIntentRecognition, demonstrateCache, demonstrateEnsemble, runAllDemonstrations } 