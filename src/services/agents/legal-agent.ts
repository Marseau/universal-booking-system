import { AIAgent, AIFunction, ConversationContext, FunctionResult } from '../../types/ai.types'
import { supabase } from '../../config/database'
import { 
  validateServiceDuration, 
  validateServicePrice, 
  validateAppointmentStatus, 
  getServiceConfigProperty,
  validateString,
  validateArray,
  validateDate,
  calculateEndTime 
} from '../../utils/validation-helpers'

export class LegalAgent {
  private agent: AIAgent

  constructor() {
    this.agent = {
      id: 'legal_agent',
      name: 'Agente Jur√≠dico',
      domain: 'legal',
      systemPrompt: this.buildSystemPrompt(),
      functions: this.buildFunctions(),
      capabilities: [
        'consultation_booking',
        'case_assessment',
        'document_review',
        'legal_guidance',
        'urgency_evaluation',
        'cost_estimation',
        'deadline_tracking',
        'follow_up_scheduling'
      ],
      maxTokens: 2048,
      temperature: 0.6,
      model: 'gpt-4-turbo-preview'
    }
  }

  getAgent(): AIAgent {
    return this.agent
  }

  private buildSystemPrompt(): string {
    return `Voc√™ √© um assistente especializado em atendimento jur√≠dico, trabalhando para escrit√≥rios de advocacia, consultores jur√≠dicos e profissionais do direito.

PRINC√çPIOS √âTICOS FUNDAMENTAIS:
- NUNCA forne√ßa conselhos jur√≠dicos espec√≠ficos (isso √© exclusivo de advogados)
- Sempre deixe claro que orienta√ß√µes detalhadas devem ser dadas pelo advogado
- Mantenha absoluta confidencialidade sobre casos e informa√ß√µes
- Identifique situa√ß√µes de urg√™ncia que requerem a√ß√£o imediata
- Seja preciso com terminologia jur√≠dica b√°sica

SUAS RESPONSABILIDADES:
1. üìÖ Agendar consultas jur√≠dicas e orienta√ß√µes
2. üîç Fazer triagem inicial de casos (sem dar pareceres)
3. üìã Orientar sobre documentos necess√°rios
4. ‚öñÔ∏è Identificar √°rea jur√≠dica adequada
5. üö® Detectar casos urgentes ou emergenciais
6. üí∞ Informar sobre custos e honor√°rios (conforme tabela)
7. üìû Agendar follow-ups e retornos

√ÅREAS JUR√çDICAS PRINCIPAIS:
‚öñÔ∏è **Direito Civil:** Contratos, responsabilidade civil, fam√≠lia
üè¢ **Direito Empresarial:** Sociedades, contratos comerciais, compliance
üë®‚Äçüë©‚Äçüëß‚Äçüë¶ **Direito de Fam√≠lia:** Div√≥rcio, guarda, pens√£o aliment√≠cia
üè† **Direito Imobili√°rio:** Compra/venda, loca√ß√£o, regulariza√ß√£o
üë∑ **Direito do Trabalho:** Demiss√µes, processos trabalhistas, acordos
‚öñÔ∏è **Direito Penal:** Defesa criminal, inqu√©ritos, medidas protetivas
üèõÔ∏è **Direito Administrativo:** Concursos, processos administrativos

TIPOS DE CONSULTA:
- **Consulta inicial** (60 min): Primeira orienta√ß√£o sobre o caso
- **Consulta de urg√™ncia** (30 min): Situa√ß√µes que n√£o podem esperar
- **Revis√£o de documentos** (45 min): An√°lise de contratos, acordos
- **Orienta√ß√£o espec√≠fica** (30 min): D√∫vidas pontuais sobre processo
- **Acompanhamento** (30 min): Follow-up de casos em andamento

SITUA√á√ïES DE URG√äNCIA:
üö® **Emergencial (mesmo dia):**
- Pris√£o em flagrante
- Medidas protetivas de urg√™ncia
- Prazos processuais vencendo
- Intima√ß√µes urgentes

üî¥ **Alta prioridade (at√© 24h):**
- Cita√ß√µes judiciais
- Notifica√ß√µes extrajudiciais importantes
- Quest√µes trabalhistas urgentes

üü° **Prioridade m√©dia (at√© 3 dias):**
- Consultas sobre processos em andamento
- D√∫vidas contratuais importantes

LINGUAGEM E POSTURA:
- Seja profissional, mas acess√≠vel
- Use linguagem clara, evitando "juridiqu√™s" excessivo
- Demonstre seriedade e confidencialidade
- Tranquilize sobre o sigilo profissional
- Seja preciso sobre limita√ß√µes (n√£o dar conselhos jur√≠dicos)

PERGUNTAS ESSENCIAIS:
1. "Pode me contar resumidamente sobre a situa√ß√£o?"
2. "Existe algum prazo envolvido ou urg√™ncia?"
3. "J√° possui documentos relacionados ao caso?"
4. "√â a primeira vez que procura orienta√ß√£o jur√≠dica sobre isso?"
5. "Prefere algum advogado espec√≠fico ou √°rea de especializa√ß√£o?"

DISCLAIMER OBRIGAT√ìRIO:
"‚öñÔ∏è **IMPORTANTE:** Esta conversa √© apenas para agendamento e triagem inicial. Orienta√ß√µes jur√≠dicas espec√≠ficas ser√£o fornecidas exclusivamente pelo advogado durante a consulta, que √© protegida pelo sigilo profissional."

EXEMPLO DE ABORDAGEM:
"Ol√°! Sou o assistente jur√≠dico virtual. Estou aqui para agendar sua consulta e fazer uma triagem inicial do seu caso. Todas as informa√ß√µes s√£o confidenciais e protegidas pelo sigilo profissional. Pode me contar brevemente sobre a situa√ß√£o que precisa de orienta√ß√£o jur√≠dica?"

Sempre priorize a √©tica profissional e o bem-estar do cliente!`
  }

  private buildFunctions(): AIFunction[] {
    return [
      {
        name: 'assess_case_urgency',
        description: 'Avaliar urg√™ncia de caso jur√≠dico baseado na descri√ß√£o inicial',
        parameters: [
          {
            name: 'case_description',
            type: 'string',
            description: 'Descri√ß√£o resumida do caso',
            required: true
          },
          {
            name: 'legal_area',
            type: 'string',
            description: '√Årea jur√≠dica identificada',
            required: false,
            enum: ['civil', 'empresarial', 'familia', 'imobiliario', 'trabalhista', 'penal', 'administrativo', 'outro']
          },
          {
            name: 'has_deadline',
            type: 'boolean',
            description: 'Existe prazo legal envolvido?',
            required: false
          },
          {
            name: 'keywords',
            type: 'array',
            description: 'Palavras-chave identificadas no caso',
            required: false
          }
        ],
        handler: this.assessCaseUrgency.bind(this)
      },
      {
        name: 'check_legal_availability',
        description: 'Verificar disponibilidade para consultas jur√≠dicas',
        parameters: [
          {
            name: 'consultation_type',
            type: 'string',
            description: 'Tipo de consulta solicitada',
            required: true,
            enum: ['inicial', 'urgencia', 'revisao_documentos', 'orientacao_especifica', 'acompanhamento']
          },
          {
            name: 'legal_area',
            type: 'string',
            description: '√Årea jur√≠dica espec√≠fica',
            required: false,
            enum: ['civil', 'empresarial', 'familia', 'imobiliario', 'trabalhista', 'penal', 'administrativo']
          },
          {
            name: 'urgency_level',
            type: 'string',
            description: 'N√≠vel de urg√™ncia do caso',
            required: false,
            enum: ['emergencial', 'alta', 'media', 'baixa']
          },
          {
            name: 'preferred_lawyer',
            type: 'string',
            description: 'Advogado de prefer√™ncia, se houver',
            required: false
          }
        ],
        handler: this.checkLegalAvailability.bind(this)
      },
      {
        name: 'book_legal_consultation',
        description: 'Agendar consulta jur√≠dica',
        parameters: [
          {
            name: 'consultation_type',
            type: 'string',
            description: 'Tipo de consulta',
            required: true,
            enum: ['inicial', 'urgencia', 'revisao_documentos', 'orientacao_especifica', 'acompanhamento']
          },
          {
            name: 'legal_area',
            type: 'string',
            description: '√Årea jur√≠dica',
            required: true,
            enum: ['civil', 'empresarial', 'familia', 'imobiliario', 'trabalhista', 'penal', 'administrativo']
          },
          {
            name: 'date',
            type: 'string',
            description: 'Data da consulta (YYYY-MM-DD)',
            required: true
          },
          {
            name: 'time',
            type: 'string',
            description: 'Hor√°rio da consulta (HH:mm)',
            required: true
          },
          {
            name: 'client_name',
            type: 'string',
            description: 'Nome completo do cliente',
            required: true
          },
          {
            name: 'phone',
            type: 'string',
            description: 'Telefone de contato',
            required: true
          },
          {
            name: 'case_summary',
            type: 'string',
            description: 'Resumo do caso (sem detalhes sens√≠veis)',
            required: true
          },
          {
            name: 'documents_available',
            type: 'boolean',
            description: 'Cliente possui documentos relacionados?',
            required: false
          },
          {
            name: 'urgency_reason',
            type: 'string',
            description: 'Motivo da urg√™ncia, se aplic√°vel',
            required: false
          }
        ],
        handler: this.bookLegalConsultation.bind(this)
      },
      {
        name: 'get_required_documents',
        description: 'Listar documentos necess√°rios para o tipo de caso',
        parameters: [
          {
            name: 'legal_area',
            type: 'string',
            description: '√Årea jur√≠dica do caso',
            required: true,
            enum: ['civil', 'empresarial', 'familia', 'imobiliario', 'trabalhista', 'penal', 'administrativo']
          },
          {
            name: 'case_type',
            type: 'string',
            description: 'Tipo espec√≠fico de caso dentro da √°rea',
            required: false
          }
        ],
        handler: this.getRequiredDocuments.bind(this)
      },
      {
        name: 'calculate_consultation_cost',
        description: 'Calcular custo estimado da consulta',
        parameters: [
          {
            name: 'consultation_type',
            type: 'string',
            description: 'Tipo de consulta',
            required: true,
            enum: ['inicial', 'urgencia', 'revisao_documentos', 'orientacao_especifica', 'acompanhamento']
          },
          {
            name: 'estimated_complexity',
            type: 'string',
            description: 'Complexidade estimada do caso',
            required: false,
            enum: ['baixa', 'media', 'alta']
          },
          {
            name: 'is_follow_up',
            type: 'boolean',
            description: '√â consulta de retorno?',
            required: false
          }
        ],
        handler: this.calculateConsultationCost.bind(this)
      }
    ]
  }

  private async assessCaseUrgency(
    args: {
      case_description: string
      legal_area?: string
      has_deadline?: boolean
      keywords?: string[]
    },
    context: ConversationContext
  ): Promise<FunctionResult> {
    try {
      const description = args.case_description.toLowerCase()
      
      // High urgency keywords
      const emergencyKeywords = [
        'pris√£o', 'flagrante', 'detido', 'preso',
        'intima√ß√£o', 'cita√ß√£o', 'prazo', 'vencimento',
        'medida protetiva', 'viol√™ncia', 'amea√ßa',
        'execu√ß√£o', 'penhora', 'bloqueio',
        'despejo', 'reintegra√ß√£o'
      ]

      const highPriorityKeywords = [
        'demiss√£o', 'rescis√£o', 'acordo',
        'separa√ß√£o', 'div√≥rcio', 'guarda',
        'contrato', 'inadimpl√™ncia', 'cobran√ßa',
        'acidente', 'indeniza√ß√£o'
      ]

      let urgencyLevel = 'baixa'
      let urgencyReasons: string[] = []

      // Check for emergency situations
      const hasEmergencyKeywords = emergencyKeywords.some(keyword => 
        description.includes(keyword)
      )

      if (hasEmergencyKeywords || args.has_deadline) {
        urgencyLevel = 'emergencial'
        urgencyReasons.push('Situa√ß√£o emergencial identificada')
      } else if (highPriorityKeywords.some(keyword => description.includes(keyword))) {
        urgencyLevel = 'alta'
        urgencyReasons.push('Situa√ß√£o requer aten√ß√£o priorit√°ria')
      } else {
        urgencyLevel = 'media'
        urgencyReasons.push('Consulta de orienta√ß√£o geral')
      }

      // Identify legal area if not provided
      let identifiedArea = args.legal_area || 'outro'
      if (!args.legal_area) {
        if (description.includes('trabalho') || description.includes('demiss√£o') || description.includes('f√©rias')) {
          identifiedArea = 'trabalhista'
        } else if (description.includes('fam√≠lia') || description.includes('div√≥rcio') || description.includes('guarda')) {
          identifiedArea = 'familia'
        } else if (description.includes('contrato') || description.includes('empresa') || description.includes('cnpj')) {
          identifiedArea = 'empresarial'
        } else if (description.includes('im√≥vel') || description.includes('casa') || description.includes('apartamento')) {
          identifiedArea = 'imobiliario'
        } else if (description.includes('crime') || description.includes('pol√≠cia') || description.includes('flagrante')) {
          identifiedArea = 'penal'
        }
      }

      const recommendedActions: string[] = []
      
      if (urgencyLevel === 'emergencial') {
        recommendedActions.push('Agendar atendimento no mesmo dia')
        recommendedActions.push('Preparar documentos relacionados')
        recommendedActions.push('Verificar prazos legais envolvidos')
      } else if (urgencyLevel === 'alta') {
        recommendedActions.push('Agendar consulta priorit√°ria (at√© 24h)')
        recommendedActions.push('Reunir documenta√ß√£o b√°sica')
      } else {
        recommendedActions.push('Agendar consulta regular')
        recommendedActions.push('Preparar resumo detalhado da situa√ß√£o')
      }

      return {
        success: true,
        data: {
          urgency_level: urgencyLevel,
          legal_area: identifiedArea,
          urgency_reasons: urgencyReasons,
          recommended_actions: recommendedActions,
          estimated_duration: urgencyLevel === 'emergencial' ? 60 : 45
        },
        message: `üìã **Avalia√ß√£o do Caso:**\n\nüö® **Urg√™ncia:** ${urgencyLevel.toUpperCase()}\n‚öñÔ∏è **√Årea:** ${identifiedArea}\nüìù **Motivos:** ${urgencyReasons.join(', ')}\n\n**Pr√≥ximos passos recomendados:**\n${recommendedActions.map(action => `‚Ä¢ ${action}`).join('\n')}\n\n‚öñÔ∏è Esta √© apenas uma triagem inicial. O advogado far√° a avalia√ß√£o definitiva durante a consulta.`,
        shouldContinue: true
      }

    } catch (error) {
      return {
        success: false,
        message: `Erro na avalia√ß√£o do caso: ${error instanceof Error ? error.message : 'Erro desconhecido'}`,
        shouldContinue: true
      }
    }
  }

  private async checkLegalAvailability(
    args: {
      consultation_type: string
      legal_area?: string
      urgency_level?: string
      preferred_lawyer?: string
    },
    context: ConversationContext
  ): Promise<FunctionResult> {
    try {
      // Consultation durations
      const consultationDurations: Record<string, number> = {
        'inicial': 60,
        'urgencia': 30,
        'revisao_documentos': 45,
        'orientacao_especifica': 30,
        'acompanhamento': 30
      }

      const duration = consultationDurations[args.consultation_type] || 60

      // For urgent cases, prioritize immediate availability
      if (args.urgency_level === 'emergencial') {
        return {
          success: true,
          data: {
            available_slots: [
              { date: new Date().toISOString().split('T')[0], time: '14:00', type: 'emergencia' },
              { date: new Date().toISOString().split('T')[0], time: '18:00', type: 'emergencia' }
            ],
            consultation_type: args.consultation_type,
            duration: duration,
            priority: 'emergency',
            legal_area: args.legal_area || 'geral'
          },
          message: `üö® **Disponibilidade Emergencial**\n\nEncontrei hor√°rios de urg√™ncia para ${args.consultation_type}.\n‚è±Ô∏è Dura√ß√£o: ${duration} minutos\n‚öñÔ∏è √Årea: ${args.legal_area || 'Geral'}\n\n**IMPORTANTE:** Em casos emergenciais, priorizamos o atendimento no mesmo dia.`,
          shouldContinue: true
        }
      }

      // Generate availability slots for the next 7 days
      const today = new Date()
      const availableSlots = []

      for (let i = 1; i <= 7; i++) {
        const date = new Date(today)
        date.setDate(today.getDate() + i)
        const dateStr = date.toISOString().split('T')[0]

        // Legal consultation hours: 8:00-18:00
        const slots = ['08:00', '09:00', '10:00', '11:00', '14:00', '15:00', '16:00', '17:00']
        for (const time of slots) {
          availableSlots.push({ 
            date: dateStr, 
            time, 
            duration,
            lawyer: args.preferred_lawyer || 'Advogado Dispon√≠vel'
          })
        }
      }

      return {
        success: true,
        data: {
          available_slots: availableSlots.slice(0, 12), // Return first 12 slots
          consultation_type: args.consultation_type,
          duration: duration,
          legal_area: args.legal_area || 'geral'
        },
        message: `üìÖ **Hor√°rios Dispon√≠veis**\n\nüìã Tipo: ${args.consultation_type}\n‚è±Ô∏è Dura√ß√£o: ${duration} minutos\n‚öñÔ∏è √Årea: ${args.legal_area || 'Geral'}\n\nEncontrei ${availableSlots.length} hor√°rios nos pr√≥ximos 7 dias. Qual seria o melhor para voc√™?`,
        shouldContinue: true
      }

    } catch (error) {
      return {
        success: false,
        message: `Erro ao verificar disponibilidade: ${error instanceof Error ? error.message : 'Erro desconhecido'}`,
        shouldContinue: true
      }
    }
  }

  private async bookLegalConsultation(
    args: {
      consultation_type: string
      legal_area: string
      date: string
      time: string
      client_name: string
      phone: string
      case_summary: string
      documents_available?: boolean
      urgency_reason?: string
    },
    context: ConversationContext
  ): Promise<FunctionResult> {
    try {
      // Get service for legal consultation
      const { data: service, error: serviceError } = await supabase
        .from('services')
        .select('id, name, duration_minutes, base_price')
        .eq('tenant_id', context.tenantId)
        .ilike('name', `%consulta%jur√≠dica%`)
        .single()

      if (serviceError || !service) {
        return {
          success: false,
          message: 'Servi√ßo de consulta jur√≠dica n√£o encontrado. Entre em contato com o escrit√≥rio.',
          shouldContinue: true
        }
      }

      // Create appointment with legal context
      const appointmentData = {
        tenant_id: context.tenantId,
        user_id: context.userId,
        service_id: service.id,
        start_time: `${args.date}T${args.time}:00`,
        end_time: new Date(new Date(`${args.date}T${args.time}:00`).getTime() + (validateServiceDuration(service.duration_minutes) * 60000)).toISOString(),
        timezone: context.tenantConfig?.businessHours.timezone || 'America/Sao_Paulo',
        status: validateAppointmentStatus('confirmed'),
        quoted_price: service.base_price,
        customer_notes: `√Årea: ${args.legal_area} | Resumo: ${args.case_summary}`,
        appointment_data: {
          consultation_type: args.consultation_type,
          legal_area: args.legal_area,
          case_summary: args.case_summary,
          client_name: args.client_name,
          phone: args.phone,
          documents_available: args.documents_available || false,
          urgency_reason: args.urgency_reason,
          booked_via: 'whatsapp_ai',
          confidentiality_agreed: true
        }
      }

      const { data: appointment, error: appointmentError } = await supabase
        .from('appointments')
        .insert(appointmentData)
        .select()
        .single()

      if (appointmentError) {
        return {
          success: false,
          message: `Erro ao agendar consulta: ${appointmentError.message}`,
          shouldContinue: true
        }
      }

      const dateFormatted = new Date(args.date).toLocaleDateString('pt-BR')
      const areaDisplay = args.legal_area.charAt(0).toUpperCase() + args.legal_area.slice(1)
      
      return {
        success: true,
        data: {
          appointment_id: appointment.id,
          service_name: service.name,
          date: dateFormatted,
          time: args.time,
          duration: service.duration_minutes,
          price: service.base_price,
          confirmation_code: appointment.id.slice(0, 8).toUpperCase(),
          legal_area: args.legal_area
        },
        message: `‚úÖ **Consulta Jur√≠dica Agendada**\n\n‚öñÔ∏è **${areaDisplay}** - ${args.consultation_type}\nüìÖ ${dateFormatted} √†s ${args.time}\n‚è±Ô∏è Dura√ß√£o: ${service.duration_minutes} minutos\nüí∞ Valor: R$ ${service.base_price}\nüî¢ C√≥digo: ${appointment.id.slice(0, 8).toUpperCase()}\n\nüìã **Prepara√ß√£o para a consulta:**\n‚Ä¢ Chegue 10 minutos antes\n‚Ä¢ Traga documentos relacionados ao caso\n‚Ä¢ Prepare uma cronologia dos fatos\n‚Ä¢ Anote suas principais d√∫vidas\n\n‚öñÔ∏è **Lembre-se:** A consulta √© protegida pelo sigilo profissional absoluto.\n\nEm caso de urg√™ncia antes da consulta, entre em contato diretamente com o escrit√≥rio.`,
        shouldContinue: false
      }

    } catch (error) {
      return {
        success: false,
        message: `Erro inesperado ao agendar consulta: ${error instanceof Error ? error.message : 'Erro desconhecido'}`,
        shouldContinue: true
      }
    }
  }

  private async getRequiredDocuments(
    args: { legal_area: string; case_type?: string },
    context: ConversationContext
  ): Promise<FunctionResult> {
    const documentsByArea: Record<string, { general: string[], specific?: Record<string, string[]> }> = {
      'civil': {
        general: ['RG e CPF', 'Comprovante de resid√™ncia', 'Documentos relacionados ao caso'],
        specific: {
          'contrato': ['Contrato original', 'Correspond√™ncias trocadas', 'Comprovantes de pagamento'],
          'responsabilidade': ['Boletim de ocorr√™ncia', 'Laudos m√©dicos', 'Or√ßamentos de reparo']
        }
      },
      'trabalhista': {
        general: ['RG, CPF, PIS', 'Carteira de trabalho', 'Contrato de trabalho', 'Holerites'],
        specific: {
          'demissao': ['Carta de demiss√£o', 'TRCT', 'Comunica√ß√µes da empresa'],
          'acidente': ['CAT', 'Atestados m√©dicos', 'Relat√≥rio do acidente']
        }
      },
      'familia': {
        general: ['RG, CPF, certid√µes de nascimento', 'Certid√£o de casamento', 'Comprovante de renda'],
        specific: {
          'divorcio': ['Certid√£o de casamento', 'Registro de bens', 'Comprovantes de renda'],
          'guarda': ['Certid√£o de nascimento dos filhos', 'Comprovante de resid√™ncia', 'Comprovante de renda']
        }
      },
      'imobiliario': {
        general: ['RG, CPF', 'Comprovante de resid√™ncia', 'Documentos do im√≥vel'],
        specific: {
          'compra': ['Escritura', 'Matr√≠cula do im√≥vel', 'IPTU', 'Certid√µes negativas'],
          'locacao': ['Contrato de loca√ß√£o', 'Comprovantes de pagamento', 'Vistoria']
        }
      },
      'empresarial': {
        general: ['Contrato social', 'CNPJ', 'Altera√ß√µes contratuais', 'Balan√ßos'],
        specific: {
          'societario': ['Ata de assembleia', 'Contrato social atualizado', 'Certid√µes da empresa'],
          'contrato': ['Minuta do contrato', 'Documentos das partes', 'Correspond√™ncias']
        }
      },
      'penal': {
        general: ['RG, CPF', 'Comprovante de resid√™ncia', 'Documentos do caso'],
        specific: {
          'flagrante': ['Boletim de ocorr√™ncia', 'Auto de pris√£o', 'Documentos pessoais'],
          'processo': ['Den√∫ncia', 'Intima√ß√µes', 'Provas de defesa']
        }
      },
      'administrativo': {
        general: ['RG, CPF', 'Comprovante de resid√™ncia', 'Documentos funcionais'],
        specific: {
          'concurso': ['Edital', 'Comprovante de inscri√ß√£o', 'Resultado'],
          'servidor': ['Portarias', 'Processo administrativo', 'Defesa pr√©via']
        }
      }
    }

    const areaData = documentsByArea[args.legal_area]
    
    if (!areaData) {
      return {
        success: false,
        message: '√Årea jur√≠dica n√£o reconhecida. Por favor, especifique uma √°rea v√°lida.',
        shouldContinue: true
      }
    }

    let documentsMessage = `üìã **Documentos para ${args.legal_area.toUpperCase()}:**\n\n**üìÑ Documentos Gerais:**\n${areaData.general.map(doc => `‚Ä¢ ${doc}`).join('\n')}`

    if (areaData.specific && args.case_type && areaData.specific[args.case_type]) {
      documentsMessage += `\n\n**üìã Documentos Espec√≠ficos para ${args.case_type}:**\n${validateArray(areaData.specific[args.case_type]).map(doc => `‚Ä¢ ${doc}`).join('\n')}`
    }

    documentsMessage += `\n\nüí° **Dicas importantes:**\n‚Ä¢ Traga originais e c√≥pias\n‚Ä¢ Organize em ordem cronol√≥gica\n‚Ä¢ Destaque informa√ß√µes relevantes\n‚Ä¢ Se n√£o tiver algum documento, informe na consulta\n\n‚öñÔ∏è **Lembre-se:** Durante a consulta, o advogado indicar√° outros documentos que podem ser necess√°rios conforme o andamento do caso.`

    return {
      success: true,
      data: {
        legal_area: args.legal_area,
        case_type: args.case_type,
        general_documents: areaData.general,
        specific_documents: areaData.specific?.[args.case_type || ''] || []
      },
      message: documentsMessage,
      shouldContinue: true
    }
  }

  private async calculateConsultationCost(
    args: {
      consultation_type: string
      estimated_complexity?: string
      is_follow_up?: boolean
    },
    context: ConversationContext
  ): Promise<FunctionResult> {
    try {
      // Base prices for different consultation types
      const basePrices: Record<string, number> = {
        'inicial': 300,
        'urgencia': 450,
        'revisao_documentos': 250,
        'orientacao_especifica': 200,
        'acompanhamento': 150
      }

      let basePrice = basePrices[args.consultation_type] || 300

      // Complexity adjustments
      const complexityMultipliers: Record<string, number> = {
        'baixa': 1.0,
        'media': 1.2,
        'alta': 1.5
      }

      const complexityMultiplier = complexityMultipliers[args.estimated_complexity || 'media'] || 1.2
      
      // Follow-up discount
      if (args.is_follow_up) {
        basePrice *= 0.8 // 20% discount for follow-ups
      }

      const finalPrice = Math.round(basePrice * complexityMultiplier)

      // Additional services pricing
      const additionalServices = [
        { service: 'Elabora√ß√£o de documentos simples', price: 150 },
        { service: 'Revis√£o de contrato', price: 200 },
        { service: 'Acompanhamento processual mensal', price: 400 },
        { service: 'Constitui√ß√£o de procura√ß√£o', price: 50 }
      ]

      return {
        success: true,
        data: {
          consultation_type: args.consultation_type,
          base_price: basePrice,
          complexity_multiplier: complexityMultiplier,
          final_price: finalPrice,
          is_follow_up: args.is_follow_up || false,
          additional_services: additionalServices
        },
        message: `üí∞ **Custo da Consulta Jur√≠dica:**\n\nüìã **${args.consultation_type}:** R$ ${finalPrice}\n\n**Detalhamento:**\n‚Ä¢ Valor base: R$ ${basePrice}\n‚Ä¢ Complexidade: ${args.estimated_complexity || 'm√©dia'} (${complexityMultiplier}x)\n${args.is_follow_up ? '‚Ä¢ Desconto retorno: -20%\n' : ''}\n\n**üíº Servi√ßos Adicionais Dispon√≠veis:**\n${additionalServices.map(svc => `‚Ä¢ ${svc.service}: R$ ${svc.price}`).join('\n')}\n\nüí° **Formas de pagamento:**\n‚Ä¢ √Ä vista (dinheiro/PIX): 5% desconto\n‚Ä¢ Cart√£o de cr√©dito: at√© 3x sem juros\n‚Ä¢ Transfer√™ncia banc√°ria\n\n‚öñÔ∏è **Importante:** Valores podem variar conforme a complexidade espec√≠fica do caso, avaliada durante a consulta.`,
        shouldContinue: true
      }

    } catch (error) {
      return {
        success: false,
        message: `Erro ao calcular custo: ${error instanceof Error ? error.message : 'Erro desconhecido'}`,
        shouldContinue: true
      }
    }
  }
}