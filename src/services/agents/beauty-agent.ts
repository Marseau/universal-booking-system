import { AIAgent, AIFunction, ConversationContext, FunctionResult } from '../../types/ai.types'
import { supabase } from '../../config/database'
import { 
  validateServiceDuration, 
  validateServicePrice, 
  validateAppointmentStatus, 
  getServiceConfigProperty,
  validateString,
  validateArray,
  validateDate,
  calculateEndTime 
} from '../../utils/validation-helpers'

export class BeautyAgent {
  private agent: AIAgent

  constructor() {
    this.agent = {
      id: 'beauty_agent',
      name: 'Agente de Beleza e Est√©tica',
      domain: 'beauty',
      systemPrompt: this.buildSystemPrompt(),
      functions: this.buildFunctions(),
      capabilities: [
        'service_booking',
        'beauty_consultation',
        'combo_packages',
        'professional_matching',
        'product_recommendations',
        'beauty_tips',
        'loyalty_programs',
        'special_occasions'
      ],
      maxTokens: 2048,
      temperature: 0.8,
      model: 'gpt-4-turbo-preview'
    }
  }

  getAgent(): AIAgent {
    return this.agent
  }

  private buildSystemPrompt(): string {
    return `Voc√™ √© um assistente especializado em beleza e est√©tica, trabalhando para sal√µes, cl√≠nicas de est√©tica, barbearias e spas.

PERSONALIDADE:
- Entusi√°stica e inspiradora
- Conhecedora de tend√™ncias de beleza
- Atenta aos detalhes e prefer√™ncias pessoais
- Promove autoestima e bem-estar
- Sugere servi√ßos complementares quando apropriado

SUAS ESPECIALIDADES:
ü¶± **Cabelos:** Corte, colora√ß√£o, tratamentos, penteados
üíÖ **Unhas:** Manicure, pedicure, nail art, alongamento
üß¥ **Est√©tica:** Limpeza de pele, hidrata√ß√£o, tratamentos
üíÑ **Maquiagem:** Dia, noite, casamentos, eventos
üßî **Barbearia:** Corte masculino, barba, bigode, sobrancelha
üíÜ **Massagem:** Relaxante, est√©tica, drenagem linf√°tica

TIPOS DE CLIENTES:
- **Primeira vez:** Seja mais explicativa e acolhedora
- **Cliente regular:** Use hist√≥rico de prefer√™ncias
- **Ocasi√£o especial:** Sugira pacotes e servi√ßos premium
- **Manuten√ß√£o:** Foque em agendamentos regulares

ESTRAT√âGIAS DE UPSELL (quando apropriado):
- Tratamentos complementares
- Produtos para casa
- Pacotes promocionais
- Programas de fidelidade
- Agendamentos regulares

PERGUNTAS IMPORTANTES:
1. "√â a sua primeira vez no sal√£o?"
2. "Tem alguma alergia ou sensibilidade?"
3. "Qual o resultado que voc√™ est√° buscando?"
4. "Tem alguma prefer√™ncia de profissional?"
5. "√â para alguma ocasi√£o especial?"

LINGUAGEM:
- Use emojis relacionados √† beleza (üíÑüíÖ‚ú®üíá‚Äç‚ôÄÔ∏è)
- Seja positiva e motivadora
- Destaque benef√≠cios dos servi√ßos
- Pergunte sobre prefer√™ncias e hist√≥rico
- Sugira tend√™ncias e novidades

OCASI√ïES ESPECIAIS:
- Casamentos: Teste antecipado obrigat√≥rio
- Formatura: Penteados elaborados
- Festas: Maquiagem duradoura
- Entrevistas: Visual profissional
- Encontros: Realce da beleza natural

CUIDADOS ESPECIAIS:
- Sempre pergunte sobre alergias
- Mencione tempo de dura√ß√£o dos servi√ßos
- Explique procedimentos para primeira vez
- Ofere√ßa orienta√ß√µes de manuten√ß√£o
- Sugira produtos adequados

EXEMPLO DE ABORDAGEM:
"Oi, linda! üíÑ‚ú® Que maravilha que voc√™ quer se cuidar! Estou aqui para te ajudar a escolher o servi√ßo perfeito. Me conta: √© para alguma ocasi√£o especial ou √© aquele mimo merecido? E √© a sua primeira vez aqui no sal√£o?"

Sempre priorize a satisfa√ß√£o da cliente e a qualidade dos servi√ßos!`
  }

  private buildFunctions(): AIFunction[] {
    return [
      {
        name: 'check_availability',
        description: 'Verificar disponibilidade para servi√ßos de beleza',
        parameters: [
          {
            name: 'service_category',
            type: 'string',
            description: 'Categoria do servi√ßo',
            required: true,
            enum: ['cabelo', 'unhas', 'estetica', 'maquiagem', 'barbearia', 'massagem', 'combo']
          },
          {
            name: 'service_name',
            type: 'string',
            description: 'Nome espec√≠fico do servi√ßo',
            required: false
          },
          {
            name: 'preferred_professional',
            type: 'string',
            description: 'Profissional preferido',
            required: false
          },
          {
            name: 'preferred_date',
            type: 'string',
            description: 'Data preferida (YYYY-MM-DD)',
            required: false
          },
          {
            name: 'preferred_time',
            type: 'string',
            description: 'Hor√°rio preferido (HH:mm)',
            required: false
          },
          {
            name: 'is_special_occasion',
            type: 'boolean',
            description: '√â para ocasi√£o especial?',
            required: false
          }
        ],
        handler: this.checkAvailability.bind(this)
      },
      {
        name: 'book_beauty_service',
        description: 'Agendar servi√ßo de beleza',
        parameters: [
          {
            name: 'service_id',
            type: 'string',
            description: 'ID do servi√ßo selecionado',
            required: true
          },
          {
            name: 'date',
            type: 'string',
            description: 'Data do agendamento (YYYY-MM-DD)',
            required: true
          },
          {
            name: 'time',
            type: 'string',
            description: 'Hor√°rio do agendamento (HH:mm)',
            required: true
          },
          {
            name: 'client_name',
            type: 'string',
            description: 'Nome da cliente',
            required: true
          },
          {
            name: 'phone',
            type: 'string',
            description: 'Telefone da cliente',
            required: true
          },
          {
            name: 'professional_id',
            type: 'string',
            description: 'ID do profissional escolhido',
            required: false
          },
          {
            name: 'special_requests',
            type: 'string',
            description: 'Pedidos especiais ou observa√ß√µes',
            required: false
          },
          {
            name: 'allergies',
            type: 'string',
            description: 'Alergias ou sensibilidades',
            required: false
          },
          {
            name: 'is_first_time',
            type: 'boolean',
            description: '√â primeira vez no sal√£o?',
            required: false
          }
        ],
        handler: this.bookBeautyService.bind(this)
      },
      {
        name: 'suggest_combo_package',
        description: 'Sugerir pacotes e combos de servi√ßos',
        parameters: [
          {
            name: 'main_service',
            type: 'string',
            description: 'Servi√ßo principal de interesse',
            required: true
          },
          {
            name: 'occasion',
            type: 'string',
            description: 'Ocasi√£o ou evento',
            required: false,
            enum: ['casamento', 'formatura', 'festa', 'entrevista', 'encontro', 'dia_a_dia', 'manutencao']
          },
          {
            name: 'budget_range',
            type: 'string',
            description: 'Faixa de or√ßamento',
            required: false,
            enum: ['economico', 'medio', 'premium', 'luxo']
          }
        ],
        handler: this.suggestComboPackage.bind(this)
      },
      {
        name: 'beauty_consultation',
        description: 'Realizar consultoria de beleza personalizada',
        parameters: [
          {
            name: 'skin_type',
            type: 'string',
            description: 'Tipo de pele',
            required: false,
            enum: ['oleosa', 'seca', 'mista', 'sensivel', 'normal']
          },
          {
            name: 'hair_type',
            type: 'string',
            description: 'Tipo de cabelo',
            required: false,
            enum: ['liso', 'ondulado', 'cacheado', 'crespo', 'misto']
          },
          {
            name: 'hair_condition',
            type: 'string',
            description: 'Condi√ß√£o do cabelo',
            required: false,
            enum: ['saudavel', 'ressecado', 'oleoso', 'danificado', 'quimicamente_tratado']
          },
          {
            name: 'desired_look',
            type: 'string',
            description: 'Visual desejado',
            required: false
          },
          {
            name: 'lifestyle',
            type: 'string',
            description: 'Estilo de vida',
            required: false,
            enum: ['corrido', 'tranquilo', 'ativo', 'social', 'profissional']
          }
        ],
        handler: this.beautyConsultation.bind(this)
      },
      {
        name: 'get_beauty_tips',
        description: 'Fornecer dicas de beleza e cuidados',
        parameters: [
          {
            name: 'tip_category',
            type: 'string',
            description: 'Categoria da dica',
            required: true,
            enum: ['cuidados_cabelo', 'cuidados_pele', 'manicure_casa', 'maquiagem_dicas', 'produtos_caseiros', 'manutencao_pos_salao']
          },
          {
            name: 'specific_concern',
            type: 'string',
            description: 'Preocupa√ß√£o espec√≠fica',
            required: false
          }
        ],
        handler: this.getBeautyTips.bind(this)
      },
      {
        name: 'loyalty_program_info',
        description: 'Informa√ß√µes sobre programa de fidelidade',
        parameters: [
          {
            name: 'client_visits',
            type: 'number',
            description: 'N√∫mero de visitas da cliente',
            required: false
          },
          {
            name: 'total_spent',
            type: 'number',
            description: 'Total gasto pela cliente',
            required: false
          }
        ],
        handler: this.loyaltyProgramInfo.bind(this)
      }
    ]
  }

  private async checkAvailability(
    args: {
      service_category: string
      service_name?: string
      preferred_professional?: string
      preferred_date?: string
      preferred_time?: string
      is_special_occasion?: boolean
    },
    context: ConversationContext
  ): Promise<FunctionResult> {
    try {
      // Get services in the requested category
      let query = supabase
        .from('services')
        .select('id, name, description, duration_minutes, base_price, service_config')
        .eq('tenant_id', context.tenantId)
        .eq('is_active', true)

      // Filter by category (check in service_config or description)
      if (args.service_category !== 'combo') {
        query = query.or(`service_config->>category.eq.${args.service_category},description.ilike.%${args.service_category}%`)
      }

      // Filter by specific service name if provided
      if (args.service_name) {
        query = query.ilike('name', `%${args.service_name}%`)
      }

      const { data: services, error } = await query

      if (error) throw error

      if (!services || services.length === 0) {
        return {
          success: false,
          message: `N√£o encontrei servi√ßos na categoria "${args.service_category}". Que tal eu te mostrar todas as nossas op√ß√µes dispon√≠veis? üíÑ‚ú®`,
          shouldContinue: true
        }
      }

      // Generate available time slots (simplified simulation)
      const today = new Date()
      const availableSlots = []

      for (let i = 1; i <= 7; i++) {
        const date = new Date(today)
        date.setDate(today.getDate() + i)
        const dateStr = date.toISOString().split('T')[0]

        // Beauty salon typical hours: 9:00-19:00
        const timeSlots = ['09:00', '10:00', '11:00', '13:30', '14:30', '15:30', '16:30', '17:30']
        
        for (const time of timeSlots) {
          availableSlots.push({
            date: dateStr,
            time,
            professional: 'Dispon√≠vel'
          })
        }
      }

      // If it's for a special occasion, prioritize weekend slots
      let prioritySlots = availableSlots
      if (args.is_special_occasion) {
        prioritySlots = availableSlots.filter(slot => {
          const date = validateDate(slot.date)
          const dayOfWeek = date.getDay()
          return dayOfWeek === 0 || dayOfWeek === 6 // Sunday or Saturday
        })
      }

      return {
        success: true,
        data: {
          services: services.map(s => ({
            id: s.id,
            name: s.name,
            description: s.description,
            duration: s.duration_minutes,
            price: s.base_price,
            category: args.service_category
          })),
          available_slots: (prioritySlots.length > 0 ? prioritySlots : availableSlots).slice(0, 12),
          is_special_occasion: args.is_special_occasion
        },
        message: `üíÑ Encontrei ${services.length} servi√ßos incr√≠veis na categoria ${args.service_category}! ${args.is_special_occasion ? '‚ú® Como √© para uma ocasi√£o especial, separei os melhores hor√°rios para voc√™!' : 'Aqui est√£o as op√ß√µes dispon√≠veis:'}`,
        shouldContinue: true
      }

    } catch (error) {
      return {
        success: false,
        message: `Ops! Tive um probleminha ao verificar a disponibilidade. Pode tentar novamente? üòÖ`,
        shouldContinue: true
      }
    }
  }

  private async bookBeautyService(
    args: {
      service_id: string
      date: string
      time: string
      client_name: string
      phone: string
      professional_id?: string
      special_requests?: string
      allergies?: string
      is_first_time?: boolean
    },
    context: ConversationContext
  ): Promise<FunctionResult> {
    try {
      // Get service details
      const { data: service, error: serviceError } = await supabase
        .from('services')
        .select('id, name, description, duration_minutes, base_price, service_config')
        .eq('id', args.service_id)
        .single()

      if (serviceError || !service) {
        return {
          success: false,
          message: 'Ops! N√£o consegui encontrar esse servi√ßo. Pode me dizer novamente qual servi√ßo voc√™ gostaria? üíÑ',
          shouldContinue: true
        }
      }

      // Calculate end time
      const startTime = new Date(`${args.date}T${args.time}:00`)
      const endTime = new Date(startTime.getTime() + (validateServiceDuration(service.duration_minutes) * 60000))

      // Create appointment
      const appointmentData = {
        tenant_id: context.tenantId,
        user_id: context.userId,
        service_id: service.id,
        start_time: startTime.toISOString(),
        end_time: endTime.toISOString(),
        timezone: context.tenantConfig?.businessHours.timezone || 'America/Sao_Paulo',
        status: validateAppointmentStatus('confirmed'),
        quoted_price: service.base_price,
        customer_notes: args.special_requests || '',
        appointment_data: {
          client_name: args.client_name,
          phone: args.phone,
          professional_id: args.professional_id,
          allergies: args.allergies,
          is_first_time: args.is_first_time || false,
          booked_via: 'whatsapp_ai',
          service_category: getServiceConfigProperty(service.service_config, 'category') || 'beauty'
        }
      }

      const { data: appointment, error: appointmentError } = await supabase
        .from('appointments')
        .insert(appointmentData)
        .select()
        .single()

      if (appointmentError) {
        return {
          success: false,
          message: `Ai, que pena! N√£o consegui fazer o agendamento: ${appointmentError.message}. Vamos tentar outro hor√°rio? üí´`,
          shouldContinue: true
        }
      }

      // Format confirmation message
      const dateFormatted = new Date(args.date).toLocaleDateString('pt-BR', { 
        weekday: 'long', 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric' 
      })

      let confirmationMessage = `‚ú® **AGENDAMENTO CONFIRMADO!** ‚ú®\n\n`
      confirmationMessage += `üíÑ **Servi√ßo:** ${service.name}\n`
      confirmationMessage += `üìÖ **Data:** ${dateFormatted}\n`
      confirmationMessage += `üïê **Hor√°rio:** ${args.time}\n`
      confirmationMessage += `‚è±Ô∏è **Dura√ß√£o:** ${service.duration_minutes} minutos\n`
      confirmationMessage += `üí∞ **Valor:** R$ ${service.base_price?.toFixed(2)}\n`
      confirmationMessage += `üî¢ **C√≥digo:** ${appointment.id.slice(0, 8).toUpperCase()}\n\n`

      // Add special notes for first-time clients
      if (args.is_first_time) {
        confirmationMessage += `üåü **Primeira vez?** Que legal! Chegue 15 minutos antes para um atendimento ainda mais especial!\n\n`
      }

      // Add allergy notes if provided
      if (args.allergies) {
        confirmationMessage += `‚ö†Ô∏è **Alergias anotadas:** ${args.allergies}\n\n`
      }

      confirmationMessage += `üìç **Dicas importantes:**\n`
      confirmationMessage += `‚Ä¢ Chegue 10 minutos antes\n`
      confirmationMessage += `‚Ä¢ Traga um documento com foto\n`
      confirmationMessage += `‚Ä¢ Para reagendar: responda esta conversa\n\n`
      confirmationMessage += `Mal posso esperar para te deixar ainda mais linda! üíÖ‚ú®`

      return {
        success: true,
        data: {
          appointment_id: appointment.id,
          service_name: service.name,
          date: dateFormatted,
          time: args.time,
          duration: service.duration_minutes,
          price: service.base_price,
          confirmation_code: appointment.id.slice(0, 8).toUpperCase()
        },
        message: confirmationMessage,
        shouldContinue: false
      }

    } catch (error) {
      return {
        success: false,
        message: `Ops! Algo deu errado no agendamento. Pode tentar novamente? Estou aqui para te ajudar! üí´`,
        shouldContinue: true
      }
    }
  }

  private async suggestComboPackage(
    args: {
      main_service: string
      occasion?: string
      budget_range?: string
    },
    context: ConversationContext
  ): Promise<FunctionResult> {
    try {
      // Define combo suggestions based on main service and occasion
      const comboSuggestions: Record<string, any> = {
        'cabelo': {
          'casamento': {
            services: ['Corte + Escova', 'Hidrata√ß√£o Profunda', 'Penteado para Noiva', 'Teste de Penteado'],
            description: 'üíç Pacote Noiva Completo',
            benefits: ['Teste antecipado obrigat√≥rio', 'Desconto especial', 'Atendimento priorit√°rio'],
            price_range: 'R$ 380 - R$ 580'
          },
          'festa': {
            services: ['Corte', 'Colora√ß√£o/Luzes', 'Escova Modelada', 'Tratamento Brilho'],
            description: 'üéâ Visual de Festa',
            benefits: ['Cor duradoura', 'Escova que dura mais', 'Produtos para casa'],
            price_range: 'R$ 220 - R$ 420'
          },
          'manutencao': {
            services: ['Corte', 'Hidrata√ß√£o', 'Finaliza√ß√£o'],
            description: '‚ú® Combo Manuten√ß√£o',
            benefits: ['Desconto de 15%', 'Agendamento facilitado', 'Produtos para casa'],
            price_range: 'R$ 120 - R$ 200'
          }
        },
        'unhas': {
          'casamento': {
            services: ['Manicure Francesa', 'Pedicure', 'Nail Art Personalizada', 'Alongamento'],
            description: 'üíÖ Pacote Noiva Perfeita',
            benefits: ['Design exclusivo', 'Teste antecipado', 'Kit de retoque'],
            price_range: 'R$ 180 - R$ 280'
          },
          'festa': {
            services: ['Esmalta√ß√£o em Gel', 'Nail Art', 'Pedicure Decorada'],
            description: 'üåü Unhas de Festa',
            benefits: ['Dura√ß√£o de 3 semanas', 'Cores da moda', 'Brilho extra'],
            price_range: 'R$ 80 - R$ 150'
          }
        },
        'estetica': {
          'casamento': {
            services: ['Limpeza Profunda', 'Peeling Qu√≠mico', 'Hidrata√ß√£o Facial', 'Drenagem Linf√°tica'],
            description: 'üë∞ Pele de Noiva',
            benefits: ['Protocolo de 2 meses', 'Pele perfeita', 'Produtos para casa'],
            price_range: 'R$ 450 - R$ 680'
          },
          'manutencao': {
            services: ['Limpeza de Pele', 'Hidrata√ß√£o', 'Protetor Solar'],
            description: 'üíß Pele Saud√°vel',
            benefits: ['Desconto mensal', 'Acompanhamento', 'Produtos com desconto'],
            price_range: 'R$ 120 - R$ 180'
          }
        }
      }

      const mainServiceKey = args.main_service.toLowerCase()
      const occasionKey = args.occasion || 'manutencao'
      
      const combo = comboSuggestions[mainServiceKey]?.[occasionKey] || comboSuggestions[mainServiceKey]?.['manutencao']

      if (!combo) {
        return {
          success: false,
          message: `Deixa eu criar uma sugest√£o personalizada para ${args.main_service}! Me conta mais sobre o que voc√™ tem em mente? üíÑ‚ú®`,
          shouldContinue: true
        }
      }

      let suggestionMessage = `‚ú® **${combo.description}** ‚ú®\n\n`
      suggestionMessage += `üéØ **Perfeito para:** ${args.occasion || 'manuten√ß√£o regular'}\n\n`
      suggestionMessage += `üìã **Inclui:**\n`
      combo.services.forEach((service: string) => {
        suggestionMessage += `‚Ä¢ ${service}\n`
      })
      suggestionMessage += `\nüí∞ **Investimento:** ${combo.price_range}\n\n`
      suggestionMessage += `üéÅ **Benef√≠cios exclusivos:**\n`
      combo.benefits.forEach((benefit: string) => {
        suggestionMessage += `‚Ä¢ ${benefit}\n`
      })

      // Add budget-specific suggestions
      if (args.budget_range) {
        const budgetTips: Record<string, string> = {
          'economico': '\nüí° **Dica:** Este pacote tem √≥timo custo-benef√≠cio!',
          'medio': '\nüí´ **Perfeito:** Ideal para quem quer qualidade sem exagerar!',
          'premium': '\nüëë **Premium:** Que tal adicionar uma massagem relaxante?',
          'luxo': '\n‚ú® **Luxo total:** Posso incluir produtos exclusivos para casa!'
        }
        suggestionMessage += budgetTips[args.budget_range] || ''
      }

      suggestionMessage += `\n\nQuer que eu agende este combo para voc√™? Ou prefere personalizar alguns servi√ßos? üòç`

      return {
        success: true,
        data: {
          combo_name: combo.description,
          services: combo.services,
          benefits: combo.benefits,
          price_range: combo.price_range,
          occasion: args.occasion,
          main_service: args.main_service
        },
        message: suggestionMessage,
        shouldContinue: true
      }

    } catch (error) {
      return {
        success: false,
        message: `Deixa eu pensar em algo especial para voc√™! Me fala mais sobre o que voc√™ est√° imaginando? üí≠‚ú®`,
        shouldContinue: true
      }
    }
  }

  private async beautyConsultation(
    args: {
      skin_type?: string
      hair_type?: string
      hair_condition?: string
      desired_look?: string
      lifestyle?: string
    },
    context: ConversationContext
  ): Promise<FunctionResult> {
    try {
      let consultation = `üíÑ **CONSULTORIA PERSONALIZADA** üíÑ\n\n`

      // Hair consultation
      if (args.hair_type || args.hair_condition) {
        consultation += `ü¶± **AN√ÅLISE CAPILAR:**\n`
        
        if (args.hair_type) {
          const hairTips: Record<string, string> = {
            'liso': '‚Ä¢ Perfeito para cortes geom√©tricos e franjas\n‚Ä¢ Evite produtos pesados\n‚Ä¢ Escove com protetor t√©rmico',
            'ondulado': '‚Ä¢ Realce as ondas com leave-in\n‚Ä¢ Cortes em camadas ficam lindos\n‚Ä¢ Evite escovar seco',
            'cacheado': '‚Ä¢ Hidrata√ß√£o √© fundamental\n‚Ä¢ Cortes espec√≠ficos para cachos\n‚Ä¢ Finalize com creme sem enx√°gue',
            'crespo': '‚Ä¢ Hidrata√ß√£o intensiva semanal\n‚Ä¢ Cortes especializados\n‚Ä¢ Produtos sem sulfato e petrolatos'
          }
          consultation += hairTips[args.hair_type] || '‚Ä¢ An√°lise personalizada necess√°ria'
          consultation += '\n\n'
        }

        if (args.hair_condition) {
          const conditionTreatments: Record<string, string> = {
            'ressecado': 'üåä **Recomendo:** Cronograma capilar + ampolas de hidrata√ß√£o',
            'oleoso': 'üß¥ **Recomendo:** Shampoo antirres√≠duo + tratamento seborreguador',
            'danificado': 'üíä **Recomendo:** Tratamento reconstrutivo + corte para remover pontas',
            'quimicamente_tratado': '‚ö° **Recomendo:** Cronograma espec√≠fico + produtos para qu√≠mica'
          }
          consultation += conditionTreatments[args.hair_condition] || ''
          consultation += '\n\n'
        }
      }

      // Skin consultation
      if (args.skin_type) {
        consultation += `‚ú® **AN√ÅLISE FACIAL:**\n`
        const skinCare: Record<string, string> = {
          'oleosa': '‚Ä¢ Limpeza di√°ria com gel ou espuma\n‚Ä¢ Hidratante oil-free\n‚Ä¢ Protetor solar com toque seco\n‚Ä¢ Limpeza de pele mensal',
          'seca': '‚Ä¢ Limpeza com lo√ß√£o ou leite\n‚Ä¢ Hidratante mais denso\n‚Ä¢ √ìleos faciais noturnos\n‚Ä¢ Hidrata√ß√£o profissional',
          'mista': '‚Ä¢ Produtos espec√≠ficos para cada zona\n‚Ä¢ Hidratante diferenciado\n‚Ä¢ Limpeza de pele personalizada',
          'sensivel': '‚Ä¢ Produtos hipoalerg√™nicos\n‚Ä¢ Evitar esfolia√ß√£o agressiva\n‚Ä¢ Protetor solar f√≠sico\n‚Ä¢ Teste de sensibilidade',
          'normal': '‚Ä¢ Manuten√ß√£o com produtos suaves\n‚Ä¢ Limpeza regular\n‚Ä¢ Hidrata√ß√£o adequada\n‚Ä¢ Prote√ß√£o solar di√°ria'
        }
        consultation += skinCare[args.skin_type] || ''
        consultation += '\n\n'
      }

      // Lifestyle recommendations
      if (args.lifestyle) {
        consultation += `üíº **DICAS PARA SEU ESTILO DE VIDA:**\n`
        const lifestyleTips: Record<string, string> = {
          'corrido': '‚ö° **Rotina pr√°tica:** Servi√ßos que duram mais, produtos 2 em 1, agendamentos estrat√©gicos',
          'tranquilo': 'üå∏ **Autocuidado:** Tratamentos relaxantes, spa day, rituais de beleza em casa',
          'ativo': 'üèÉ‚Äç‚ôÄÔ∏è **Para quem se exercita:** Produtos √† prova d\'√°gua, penteados pr√°ticos, cuidados p√≥s-treino',
          'social': 'üéâ **Sempre arrumada:** Servi√ßos duradouros, produtos de retoque, t√©cnicas de make expressa',
          'profissional': 'üëî **Visual corporativo:** Looks cl√°ssicos, manuten√ß√£o regular, produtos discretos'
        }
        consultation += lifestyleTips[args.lifestyle] || ''
        consultation += '\n\n'
      }

      // Desired look suggestions
      if (args.desired_look) {
        consultation += `üéØ **PARA ALCAN√áAR SEU VISUAL IDEAL:**\n`
        consultation += `"${args.desired_look}"\n\n`
        consultation += `Vou criar um plano personalizado para voc√™! ‚ú®\n\n`
      }

      consultation += `üìÖ **PR√ìXIMOS PASSOS:**\n`
      consultation += `‚Ä¢ Agendar consulta presencial (gratuita)\n`
      consultation += `‚Ä¢ Teste de produtos para casa\n`
      consultation += `‚Ä¢ Cronograma de tratamentos\n`
      consultation += `‚Ä¢ Orienta√ß√µes personalizadas\n\n`
      consultation += `Quer que eu agende uma consulta presencial para refinarmos tudo? √â por conta da casa! üíñ`

      return {
        success: true,
        data: {
          consultation_type: 'personalized',
          hair_type: args.hair_type,
          skin_type: args.skin_type,
          lifestyle: args.lifestyle,
          recommendations_provided: true
        },
        message: consultation,
        shouldContinue: true
      }

    } catch (error) {
      return {
        success: false,
        message: `Vou fazer uma an√°lise super especial para voc√™! Me conta um pouquinho mais sobre seu cabelo e pele? üíï`,
        shouldContinue: true
      }
    }
  }

  private async getBeautyTips(
    args: {
      tip_category: string
      specific_concern?: string
    },
    context: ConversationContext
  ): Promise<FunctionResult> {
    const tips: Record<string, string> = {
      'cuidados_cabelo': `ü¶± **DICAS DE CUIDADOS CAPILARES:**\n\n**Rotina b√°sica:**\n‚Ä¢ Lave 2-3x por semana (cabelos oleosos) ou 1-2x (cabelos secos)\n‚Ä¢ Use condicionador apenas do meio para as pontas\n‚Ä¢ M√°scara hidratante 1x por semana\n‚Ä¢ Protetor t√©rmico sempre antes do calor\n\n**Dicas expert:**\n‚Ä¢ √Ågua morna/fria para lavar\n‚Ä¢ Escove sempre com cabelo √∫mido\n‚Ä¢ Durma com fronha de cetim\n‚Ä¢ Corte as pontas a cada 3 meses`,

      'cuidados_pele': `‚ú® **ROTINA DE SKINCARE:**\n\n**Manh√£:**\n1. Limpeza suave\n2. T√¥nico/Ess√™ncia\n3. Hidratante\n4. Protetor solar (OBRIGAT√ìRIO!)\n\n**Noite:**\n1. Demaquilante\n2. Limpeza profunda\n3. T√¥nico\n4. S√©runs/ativos\n5. Hidratante noturno\n\n**1x por semana:**\n‚Ä¢ Esfolia√ß√£o suave\n‚Ä¢ M√°scara facial`,

      'manicure_casa': `üíÖ **MANICURE EM CASA:**\n\n**Passo a passo:**\n1. Remova o esmalte antigo\n2. Deixe as unhas de molho 5 min\n3. Empurre as cut√≠culas (nunca corte!)\n4. Lixe no formato desejado\n5. Use base\n6. 2 camadas de esmalte\n7. Finalize com top coat\n\n**Dicas:**\n‚Ä¢ Espere secar entre camadas\n‚Ä¢ Use √≥leo de cut√≠cula diariamente\n‚Ä¢ Hidrate as m√£os sempre`,

      'maquiagem_dicas': `üíÑ **DICAS DE MAQUIAGEM:**\n\n**Base perfeita:**\n‚Ä¢ Primer sempre antes da base\n‚Ä¢ Escolha o tom certo (teste no pesco√ßo)\n‚Ä¢ Aplique com esponja ou pincel\n‚Ä¢ Fixe com p√≥ transl√∫cido\n\n**Dura√ß√£o garantida:**\n‚Ä¢ Setting spray\n‚Ä¢ Produtos √† prova d'√°gua para olhos\n‚Ä¢ Blot powder para retoques\n‚Ä¢ Evite tocar o rosto\n\n**B√°sico do dia a dia:**\n‚Ä¢ Corretivo, r√≠mel e gloss j√° fazem milagres!`,

      'produtos_caseiros': `üåø **RECEITAS NATURAIS:**\n\n**M√°scara hidratante (cabelo):**\n‚Ä¢ 1 abacate + 2 colheres de mel\n‚Ä¢ Deixe 30 min e enx√°gue\n\n**Esfoliante facial:**\n‚Ä¢ A√ß√∫car + mel + algumas gotas de lim√£o\n‚Ä¢ Massageie suavemente 2 min\n\n**M√°scara facial:**\n‚Ä¢ Aveia + leite + mel\n‚Ä¢ Deixe 15 min\n\n**‚ö†Ô∏è Sempre teste antes em pequena √°rea!**`,

      'manutencao_pos_salao': `‚ú® **MANUTEN√á√ÉO P√ìS-SAL√ÉO:**\n\n**Primeiras 48h:**\n‚Ä¢ Evite lavar o cabelo\n‚Ä¢ N√£o molhe as unhas\n‚Ä¢ Use produtos recomendados\n‚Ä¢ Proteja dos raios solares\n\n**Primeira semana:**\n‚Ä¢ Shampoo e condicionador espec√≠ficos\n‚Ä¢ Hidrata√ß√£o suave\n‚Ä¢ Evite produtos com √°lcool\n‚Ä¢ Durma com touca de cetim\n\n**Para durar mais:**\n‚Ä¢ Retoque das unhas em 15 dias\n‚Ä¢ Hidrata√ß√£o capilar em casa\n‚Ä¢ Protetor t√©rmico sempre\n‚Ä¢ Agendamento da manuten√ß√£o`
    }

    const tip = tips[args.tip_category]
    
    if (!tip) {
      return {
        success: false,
        message: 'Qual tipo de dica voc√™ gostaria? Tenho dicas de cabelo, pele, unhas, maquiagem, receitas caseiras e manuten√ß√£o! üíÑ‚ú®',
        shouldContinue: true
      }
    }

    let response = tip
    
    if (args.specific_concern) {
      response += `\n\nüí° **Sobre "${args.specific_concern}":** Essa √© uma preocupa√ß√£o comum! Na pr√≥xima consulta, vou dar dicas ainda mais espec√≠ficas para seu caso. üòâ`
    }

    response += `\n\nüíñ **Lembre-se:** Consist√™ncia √© a chave! E quando quiser um resultado profissional, estou aqui! ‚ú®`

    return {
      success: true,
      data: { tip_category: args.tip_category },
      message: response,
      shouldContinue: true
    }
  }

  private async loyaltyProgramInfo(
    args: {
      client_visits?: number
      total_spent?: number
    },
    context: ConversationContext
  ): Promise<FunctionResult> {
    const visits = args.client_visits || 0
    const totalSpent = args.total_spent || 0

    let loyaltyMessage = `üíé **PROGRAMA FIDELIDADE - BELEZA VIP** üíé\n\n`

    // Determine current tier
    let currentTier = 'Bronze'
    let nextTier = 'Prata'
    let missingForNext = 500 - totalSpent

    if (totalSpent >= 2000) {
      currentTier = 'Diamante'
      nextTier = 'Diamante'
      missingForNext = 0
    } else if (totalSpent >= 1000) {
      currentTier = 'Ouro'
      nextTier = 'Diamante'
      missingForNext = 2000 - totalSpent
    } else if (totalSpent >= 500) {
      currentTier = 'Prata'
      nextTier = 'Ouro'
      missingForNext = 1000 - totalSpent
    }

    loyaltyMessage += `üèÜ **Seu n√≠vel atual:** ${currentTier}\n`
    loyaltyMessage += `üìä **Visitas:** ${visits} | **Total investido:** R$ ${totalSpent.toFixed(2)}\n\n`

    // Current benefits
    const benefits: Record<string, string[]> = {
      'Bronze': ['5% desconto em servi√ßos', 'Prioridade no agendamento', 'Lembretes autom√°ticos'],
      'Prata': ['10% desconto em servi√ßos', '15% desconto em produtos', 'Brinde no anivers√°rio', 'Acesso a promo√ß√µes exclusivas'],
      'Ouro': ['15% desconto em servi√ßos', '20% desconto em produtos', 'Consultorias gratuitas', 'Acesso VIP a novidades'],
      'Diamante': ['20% desconto em servi√ßos', '25% desconto em produtos', 'Tratamentos exclusivos', 'Personal beauty advisor', 'Eventos VIP']
    }

    loyaltyMessage += `‚ú® **Seus benef√≠cios ${currentTier}:**\n`
    validateArray(benefits[currentTier]).forEach(benefit => {
      loyaltyMessage += `‚Ä¢ ${benefit}\n`
    })

    // Next tier information
    if (missingForNext > 0) {
      loyaltyMessage += `\nüéØ **Para ${nextTier}:** Faltam apenas R$ ${missingForNext.toFixed(2)}!\n\n`
      loyaltyMessage += `üéÅ **Benef√≠cios ${nextTier}:**\n`
      validateArray(benefits[nextTier]).forEach(benefit => {
        loyaltyMessage += `‚Ä¢ ${benefit}\n`
      })
    } else {
      loyaltyMessage += `\nüëë **Parab√©ns!** Voc√™ j√° est√° no n√≠vel m√°ximo! Aproveite todos os benef√≠cios VIP! ‚ú®`
    }

    // Special offers based on tier
    loyaltyMessage += `\n\nüéâ **OFERTA ESPECIAL PARA VOC√ä:**\n`
    if (currentTier === 'Bronze') {
      loyaltyMessage += `‚Ä¢ Traga uma amiga e ganhe 20% de desconto no pr√≥ximo servi√ßo!\n`
    } else if (currentTier === 'Prata') {
      loyaltyMessage += `‚Ä¢ Pacote duo: voc√™ + amiga com 25% de desconto cada!\n`
    } else {
      loyaltyMessage += `‚Ä¢ Spa day exclusivo: 3 servi√ßos com 30% de desconto!\n`
    }

    loyaltyMessage += `\nQuer aproveitar alguma dessas vantagens? √â s√≥ me falar! üíñ`

    return {
      success: true,
      data: {
        current_tier: currentTier,
        next_tier: nextTier,
        total_visits: visits,
        total_spent: totalSpent,
        missing_for_next: missingForNext,
        benefits: benefits[currentTier]
      },
      message: loyaltyMessage,
      shouldContinue: true
    }
  }
}