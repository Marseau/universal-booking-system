import AdvancedIntentRecognitionService from './services/advanced-intent-recognition.service'
import { ConversationContext } from './types/ai.types'
import { BusinessDomain } from './types/database.types'

/**
 * Demonstra√ß√£o do Sistema Avan√ßado de Reconhecimento de Inten√ß√µes
 * 
 * Este demo mostra as funcionalidades enterprise:
 * - M√∫ltiplos engines de reconhecimento (Pattern, OpenAI, Statistical)
 * - Ensemble learning com vota√ß√£o ponderada
 * - Cache inteligente com TTL configur√°vel
 * - M√©tricas em tempo real
 * - Roteamento avan√ßado com regras de neg√≥cio
 * - Sistema de escala√ß√£o autom√°tica
 * - Aprendizado adaptativo
 */

class AdvancedIntentDemo {
  private intentService: AdvancedIntentRecognitionService

  constructor() {
    this.intentService = new AdvancedIntentRecognitionService()
  }

  async runDemonstration(): Promise<void> {
    console.log('\nüöÄ DEMONSTRA√á√ÉO - Sistema Avan√ßado de Reconhecimento de Inten√ß√µes\n')
    
    // Preparar contextos para diferentes dom√≠nios
    const contexts = this.createTestContexts()
    
    // Executar cen√°rios de teste
    await this.runTestScenarios(contexts)
    
    // Mostrar m√©tricas do sistema
    this.showMetrics()
    
    console.log('\n‚úÖ Demonstra√ß√£o conclu√≠da com sucesso!')
  }

  private createTestContexts(): Record<BusinessDomain, ConversationContext> {
    const baseContext = {
      sessionId: 'demo_session_' + Date.now(),
      userId: 'demo_user',
      tenantId: 'demo_tenant',
      conversationHistory: [],
      lastInteraction: new Date(),
      metadata: {}
    }

    return {
      'beauty': {
        ...baseContext,
        sessionId: 'beauty_session',
        tenantConfig: {
          id: 'beauty_tenant',
          name: 'Sal√£o de Beleza Demo',
          domain: 'beauty' as BusinessDomain,
          settings: {},
          aiSettings: {
            greetingMessage: 'Ol√°! Como posso ajud√°-lo hoje?',
            domainKeywords: ['beleza', 'est√©tica', 'manicure'],
            sensitiveTopics: [],
            personality: { tone: 'friendly', energy: 'medium', empathy: 'high' },
            contextWindows: 10,
            escalationTriggers: ['emerg√™ncia', 'problema grave'],
            maxConversationLength: 50
          }
        }
      },
      'healthcare': {
        ...baseContext,
        sessionId: 'healthcare_session',
        tenantConfig: {
          id: 'healthcare_tenant',
          name: 'Cl√≠nica M√©dica Demo',
          domain: 'healthcare' as BusinessDomain,
          settings: {},
          aiSettings: {
            greetingMessage: 'Ol√°! Como posso ajud√°-lo com sua sa√∫de?',
            domainKeywords: ['sa√∫de', 'medicina', 'consulta'],
            sensitiveTopics: ['morte', 'suic√≠dio'],
            personality: 'professional',
            contextWindows: 10,
            escalationTriggers: ['dor forte', 'sangramento', 'desmaio'],
            maxConversationLength: 50
          }
        }
      },
      'legal': {
        ...baseContext,
        sessionId: 'legal_session',
        tenantConfig: {
          id: 'legal_tenant',
          name: 'Escrit√≥rio de Advocacia Demo',
          domain: 'legal' as BusinessDomain,
          settings: {},
          aiSettings: {
            greetingMessage: 'Ol√°! Como posso ajud√°-lo com quest√µes jur√≠dicas?',
            domainKeywords: ['direito', 'advocacia', 'processo'],
            sensitiveTopics: ['crime', 'viol√™ncia'],
            personality: 'formal',
            contextWindows: 10,
            escalationTriggers: ['urgente', 'processo judicial'],
            maxConversationLength: 50
          }
        }
      },
      'education': {
        ...baseContext,
        sessionId: 'education_session',
        tenantConfig: {
          id: 'education_tenant',
          name: 'Escola de Idiomas Demo',
          domain: 'education' as BusinessDomain,
          settings: {},
          aiSettings: {
            greetingMessage: 'Ol√°! Como posso ajud√°-lo com seus estudos?',
            domainKeywords: ['educa√ß√£o', 'ensino', 'curso'],
            sensitiveTopics: ['bullying'],
            personality: 'encouraging',
            contextWindows: 10,
            escalationTriggers: ['bullying', 'problema familiar'],
            maxConversationLength: 50
          }
        }
      },
      'sports': {
        ...baseContext,
        sessionId: 'sports_session',
        tenantConfig: {
          id: 'sports_tenant',
          name: 'Academia Fitness Demo',
          domain: 'sports' as BusinessDomain,
          settings: {},
          aiSettings: {
            greetingMessage: 'Ol√°! Como posso ajud√°-lo com seus treinos?',
            domainKeywords: ['fitness', 'esporte', 'treino'],
            sensitiveTopics: ['les√£o grave'],
            personality: 'motivational',
            contextWindows: 10,
            escalationTriggers: ['les√£o', 'dor intensa'],
            maxConversationLength: 50
          }
        }
      },
      'consulting': {
        ...baseContext,
        sessionId: 'consulting_session',
        tenantConfig: {
          id: 'consulting_tenant',
          name: 'Consultoria Empresarial Demo',
          domain: 'consulting' as BusinessDomain,
          settings: {},
          aiSettings: {
            greetingMessage: 'Ol√°! Como posso ajud√°-lo com sua empresa?',
            domainKeywords: ['neg√≥cios', 'consultoria', 'estrat√©gia'],
            sensitiveTopics: ['fal√™ncia'],
            personality: 'professional',
            contextWindows: 10,
            escalationTriggers: ['crise', 'fal√™ncia'],
            maxConversationLength: 50
          }
        }
      }
    }
  }

  private async runTestScenarios(contexts: Record<BusinessDomain, ConversationContext>): Promise<void> {
    const testScenarios = [
      {
        title: 'üìÖ Agendamento B√°sico - Sal√£o de Beleza',
        message: 'Oi! Gostaria de agendar uma manicure para amanh√£ √†s 14h',
        context: contexts.beauty,
        expectedIntent: 'booking_request'
      },
      {
        title: 'üö® Emerg√™ncia M√©dica - Cl√≠nica',
        message: 'Socorro! Estou sentindo uma dor muito forte no peito e falta de ar',
        context: contexts.healthcare,
        expectedIntent: 'emergency'
      },
      {
        title: '‚öñÔ∏è Consulta Jur√≠dica - Advocacia',
        message: 'Preciso falar com um advogado sobre meu processo trabalhista',
        context: contexts.legal,
        expectedIntent: 'booking_request'
      },
      {
        title: 'üéì Informa√ß√µes de Curso - Educa√ß√£o',
        message: 'Quais s√£o os cursos de ingl√™s dispon√≠veis e qual o pre√ßo?',
        context: contexts.education,
        expectedIntent: 'service_inquiry'
      },
      {
        title: 'üí™ Personal Trainer - Academia',
        message: 'Quero cancelar meu treino de hoje, estou com uma les√£o no joelho',
        context: contexts.sports,
        expectedIntent: 'booking_cancel'
      },
      {
        title: 'üíº Consultoria Empresarial',
        message: 'Nossa empresa est√° passando por uma crise financeira, precisamos de ajuda urgente',
        context: contexts.consulting,
        expectedIntent: 'escalation_request'
      }
    ]

    for (let i = 0; i < testScenarios.length; i++) {
      const scenario = testScenarios[i]
      await this.runScenario(scenario, i + 1)
      
      // Adicionar delay entre cen√°rios para simular uso real
      await this.delay(100)
    }
  }

  private async runScenario(scenario: any, scenarioNumber: number): Promise<void> {
    console.log(`\n${scenarioNumber}. ${scenario.title}`)
    console.log(`üìù Mensagem: "${scenario.message}"`)
    console.log(`üè¢ Dom√≠nio: ${scenario.context.tenantConfig?.domain}`)

    const startTime = Date.now()

    try {
      // Reconhecimento de inten√ß√£o com engines m√∫ltiplos
      const intent = await this.intentService.recognizeIntent(
        scenario.message,
        scenario.context,
        { cacheTtl: 300000 } // 5 minutos de cache
      )

      // Roteamento avan√ßado
      const routing = await this.intentService.routeWithAdvancedLogic(intent, scenario.context)

      const processingTime = Date.now() - startTime

      // Exibir resultados
      console.log(`\n   üéØ Intent Detectado: ${intent.type} (${(intent.confidence * 100).toFixed(1)}%)`)
      
      if (intent.entities && intent.entities.length > 0) {
        console.log(`   üìã Entidades:`)
        intent.entities.forEach(entity => {
          console.log(`      ‚Ä¢ ${entity.type}: "${entity.value}" (${(entity.confidence * 100).toFixed(1)}%)`)
        })
      }

      if (intent.metadata?.engines) {
        console.log(`   üîß Engines Utilizados:`)
        intent.metadata.engines.forEach(engine => {
          const status = engine.success ? '‚úÖ' : '‚ùå'
          console.log(`      ${status} ${engine.name}: ${engine.processingTime}ms`)
        })
      }

      console.log(`\n   üéØ Roteamento:`)
      console.log(`      üìç Dom√≠nio Prim√°rio: ${routing.primaryDomain}`)
      console.log(`      ‚ö†Ô∏è Escala√ß√£o: ${routing.escalationRequired ? 'SIM' : 'N√ÉO'}`)
      console.log(`      üî• Prioridade: ${routing.priority.toUpperCase()}`)
      
      if (routing.suggestedActions.length > 0) {
        console.log(`      üí° A√ß√µes Sugeridas:`)
        routing.suggestedActions.forEach(action => {
          console.log(`         ‚Ä¢ ${action.action} (${action.priority}): ${action.description}`)
        })
      }

      if (routing.metadata.rulesApplied.length > 0) {
        console.log(`      üìã Regras Aplicadas: ${routing.metadata.rulesApplied.join(', ')}`)
      }

      console.log(`   ‚ö° Tempo de Processamento: ${processingTime}ms`)

      // Verificar se o intent est√° correto
      const isCorrect = intent.type === scenario.expectedIntent
      const correctIcon = isCorrect ? '‚úÖ' : '‚ùå'
      console.log(`   ${correctIcon} Precis√£o: ${isCorrect ? 'CORRETO' : 'INCORRETO'} (esperado: ${scenario.expectedIntent})`)

    } catch (error) {
      console.error(`   ‚ùå Erro no cen√°rio ${scenarioNumber}:`, error)
    }
  }

  private showMetrics(): void {
    console.log('\nüìä M√âTRICAS DO SISTEMA')
    console.log('=' .repeat(50))

    const metrics = this.intentService.getMetrics()

    console.log(`üìà Total de Reconhecimentos: ${metrics.totalRecognitions}`)
    console.log(`‚úÖ Reconhecimentos Bem-sucedidos: ${metrics.successfulRecognitions}`)
    console.log(`üéØ Taxa de Sucesso: ${((metrics.successfulRecognitions / metrics.totalRecognitions) * 100).toFixed(1)}%`)
    console.log(`üíæ Cache Hits: ${metrics.cacheHits}`)
    console.log(`‚ö° Tempo M√©dio de Processamento: ${metrics.averageProcessingTime.toFixed(2)}ms`)

    if (metrics.intentAccuracy.size > 0) {
      console.log(`\nüéØ Precis√£o por Intent:`)
      for (const [intent, accuracy] of metrics.intentAccuracy.entries()) {
        console.log(`   ‚Ä¢ ${intent}: ${(accuracy * 100).toFixed(1)}%`)
      }
    }

    if (metrics.enginePerformance.size > 0) {
      console.log(`\nüîß Performance dos Engines:`)
      for (const [engine, performance] of metrics.enginePerformance.entries()) {
        console.log(`   ‚Ä¢ ${engine}: ${performance.toFixed(2)}ms`)
      }
    }

    const uptime = Date.now() - metrics.lastReset
    console.log(`\n‚è±Ô∏è Uptime: ${(uptime / 1000).toFixed(1)}s`)
  }

  private async delay(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms))
  }

  /**
   * Demonstra√ß√£o de funcionalidades avan√ßadas
   */
  async demonstrateAdvancedFeatures(): Promise<void> {
    console.log('\nüî¨ DEMONSTRA√á√ÉO - Funcionalidades Avan√ßadas\n')

    // 1. Cache Inteligente
    await this.demonstrateCache()
    
    // 2. Ensemble Learning
    await this.demonstrateEnsembleLearning()
    
    // 3. Roteamento Din√¢mico
    await this.demonstrateDynamicRouting()
    
    // 4. Sistema de Escala√ß√£o
    await this.demonstrateEscalation()
  }

  private async demonstrateCache(): Promise<void> {
    console.log('üíæ Testando Cache Inteligente...')
    
    const context = this.createTestContexts().beauty
    const message = 'Quero agendar uma manicure'

    // Primeira execu√ß√£o (sem cache)
    const start1 = Date.now()
    await this.intentService.recognizeIntent(message, context)
    const time1 = Date.now() - start1

    // Segunda execu√ß√£o (com cache)
    const start2 = Date.now()
    await this.intentService.recognizeIntent(message, context)
    const time2 = Date.now() - start2

    console.log(`   ‚ö° Primeira execu√ß√£o: ${time1}ms`)
    console.log(`   üíæ Segunda execu√ß√£o (cache): ${time2}ms`)
    console.log(`   üìà Melhoria: ${((time1 - time2) / time1 * 100).toFixed(1)}%`)
  }

  private async demonstrateEnsembleLearning(): Promise<void> {
    console.log('\nüß† Testando Ensemble Learning...')
    
    const context = this.createTestContexts().healthcare
    const message = 'Estou com febre e dor de cabe√ßa h√° 3 dias'

    const result = await this.intentService.recognizeIntent(message, context)
    
    console.log(`   üéØ Intent Final: ${result.type}`)
    console.log(`   üî¢ Confian√ßa: ${(result.confidence * 100).toFixed(1)}%`)
    
    if (result.metadata?.engines) {
      console.log(`   üîß Engines Consultados:`)
      result.metadata.engines.forEach(engine => {
        console.log(`      ‚Ä¢ ${engine.name}: ${engine.success ? 'Sucesso' : 'Falhou'}`)
      })
    }
  }

  private async demonstrateDynamicRouting(): Promise<void> {
    console.log('\nüîÄ Testando Roteamento Din√¢mico...')
    
    const context = this.createTestContexts().legal
    const emergencyMessage = 'Preciso de um advogado urgentemente, √© uma emerg√™ncia'

    const intent = await this.intentService.recognizeIntent(emergencyMessage, context)
    const routing = await this.intentService.routeWithAdvancedLogic(intent, context)

    console.log(`   üìç Dom√≠nio: ${routing.primaryDomain}`)
    console.log(`   üö® Escala√ß√£o: ${routing.escalationRequired ? 'SIM' : 'N√ÉO'}`)
    console.log(`   üî• Prioridade: ${routing.priority}`)
    console.log(`   üìã Regras: ${routing.metadata.rulesApplied.join(', ') || 'Nenhuma'}`)
  }

  private async demonstrateEscalation(): Promise<void> {
    console.log('\nüö® Testando Sistema de Escala√ß√£o...')
    
    const scenarios = [
      { 
        message: 'Socorro! √â uma emerg√™ncia!', 
        domain: 'healthcare',
        expected: 'CR√çTICO'
      },
      { 
        message: 'N√£o estou entendendo nada, quero falar com algu√©m', 
        domain: 'beauty',
        expected: 'ALTO'
      },
      { 
        message: 'Gostaria de agendar um hor√°rio', 
        domain: 'beauty',
        expected: 'BAIXO'
      }
    ]

    for (const scenario of scenarios) {
      const context = this.createTestContexts()[scenario.domain as BusinessDomain]
      const intent = await this.intentService.recognizeIntent(scenario.message, context)
      const routing = await this.intentService.routeWithAdvancedLogic(intent, context)

      console.log(`   üìù "${scenario.message}"`)
      console.log(`      üî• Prioridade: ${routing.priority.toUpperCase()}`)
      console.log(`      üö® Escala√ß√£o: ${routing.escalationRequired ? routing.escalationType : 'N√£o requerida'}`)
    }
  }
}

// Executar demonstra√ß√£o
async function runDemo(): Promise<void> {
  const demo = new AdvancedIntentDemo()
  
  try {
    await demo.runDemonstration()
    await demo.demonstrateAdvancedFeatures()
  } catch (error) {
    console.error('Erro na demonstra√ß√£o:', error)
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  runDemo().catch(console.error)
}

export { AdvancedIntentDemo, runDemo } 